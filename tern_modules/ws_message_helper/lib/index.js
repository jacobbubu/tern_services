// Generated by CoffeeScript 1.3.3
var LZF, MessageHead;

LZF = require('tern.lzf');

/*
# @return   none
# @callback next(err) if error occured
#
# @param    WebSocketConnection that websocket server passed-by
# @param    message serialized by string
*/


MessageHead = {
  TEXT: 0,
  LZF: 1,
  MEDIA: 2
};

module.exports.send = function(connection, message, next) {
  var head, lzfMessage, originalLength;
  try {
    if ((connection._tern != null) && connection._tern.compressMethod === 'lzf') {
      lzfMessage = LZF.compress(message);
      originalLength = new Buffer(message).length;
      if (lzfMessage.length + 1 < originalLength) {
        head = new Buffer(1);
        head.writeUInt8(MessageHead.LZF, 0);
        return connection.sendBytes(Buffer.concat([head, lzfMessage], head.length + lzfMessage.length), function(err) {
          if (next != null) {
            next(err);
          }
        });
      } else {
        return connection.sendUTF(message, function(err) {
          if (next != null) {
            next(err);
          }
        });
      }
    } else {
      return connection.sendUTF(message, function(err) {
        if (next != null) {
          next(err);
        }
      });
    }
  } catch (e) {
    if (next != null) {
      next(e);
    }
  }
};

module.exports.parse = function(message) {
  var buf;
  if (message.type === 'utf8') {
    return message.utf8Data;
  } else {
    buf = message.binaryData;
    if (buf.readUInt8(0) === MessageHead.LZF) {
      return LZF.decompress(buf.slice(1));
    } else {
      return message;
    }
  }
};
