// Generated by CoffeeScript 1.3.3
/*
# Declare winston module
*/

var BrokersHelper, initialize, internals, winston;

winston = require('winston');

BrokersHelper = require('tern.central_config').BrokersHelper;

/*
# Internal variables
*/


internals = {
  logger: null,
  configObj: null,
  config: null,
  loggerInit: function() {
    var method, option, setMethod, t, transports, _ref, _results;
    transports = [];
    _ref = internals.config;
    for (t in _ref) {
      option = _ref[t];
      t = t.toLowerCase();
      switch (t) {
        case 'console':
          transports.push(new winston.transports.Console(option));
          break;
        case 'file':
          transports.push(new winston.transports.File(option));
          break;
        case 'loggly':
          transports.push(new winston.transports.Loggly(option));
          break;
        default:
          console.error("Unsupported log transport: '" + t + "'");
      }
    }
    internals.logger = new winston.Logger({
      'transports': transports
    });
    internals.logger.setLevels(winston.config.syslog.levels);
    setMethod = function(method) {
      var name;
      name = method;
      return exports[name] = function() {
        return internals.logger[name].apply(internals.logger, arguments);
      };
    };
    _results = [];
    for (method in winston.config.syslog.levels) {
      _results.push(setMethod(method));
    }
    return _results;
  }
};

/*
# Initialization
*/


initialize = (function() {
  internals.configObj = BrokersHelper.getConfig('logger/transports');
  if (internals.configObj != null) {
    internals.config = internals.configObj.value;
    internals.configObj.on('changed', function(oldValue, newValue) {
      console.log('logger config changed');
      internals.config = newValue;
      return internals.loggerInit();
    });
  } else {
    internals.config = {
      console: {
        colorize: true,
        level: 0
      }
    };
  }
  return internals.loggerInit();
})();
