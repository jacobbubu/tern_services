// Generated by CoffeeScript 1.3.3
var Receiver, zmq,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

zmq = require("zmq");

module.exports = Receiver = (function() {

  function Receiver(options) {
    this.options = options != null ? options : {};
    this._message = __bind(this._message, this);

    this.workerClasses = {};
    this._connect();
  }

  Receiver.prototype.close = function() {
    return this.socket.close();
  };

  Receiver.prototype.registerWorker = function(name, workerClass) {
    return this.workerClasses[name] = workerClass;
  };

  Receiver.prototype._connect = function() {
    var endpoint;
    endpoint = this.options.dealer || "ipc:///tmp/queueServer-dealer";
    this.socket = zmq.socket("rep");
    this.socket.on("message", this._message);
    return this.socket.connect(endpoint);
  };

  Receiver.prototype._message = function(payload) {
    var task,
      _this = this;
    task = JSON.parse(payload);
    return this._runTask(task, function(err, data) {
      payload = err != null ? JSON.stringify({
        id: task.id,
        response: "failed",
        data: err.toString()
      }) : JSON.stringify({
        id: task.id,
        response: "completed",
        data: data
      });
      return _this.socket.send(payload);
    });
  };

  Receiver.prototype._runTask = function(task, next) {
    var Task, instance;
    try {
      Task = this.workerClasses[task.request];
      if (Task == null) {
        throw new Error("Unknown task '" + task.request + "'");
      }
      instance = new Task(this);
      return instance.run(task.data, next);
    } catch (err) {
      return next(err);
    }
  };

  return Receiver;

})();
