// Generated by CoffeeScript 1.3.3
var Broker, EventEmitter, Queue, async, zmq,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

zmq = require("zmq");

async = require("async");

EventEmitter = require("events").EventEmitter;

Queue = require("./queue");

module.exports = Broker = (function(_super) {

  __extends(Broker, _super);

  function Broker(options) {
    this.options = options != null ? options : {};
    this._resendMessage = __bind(this._resendMessage, this);

    this._resendExistingMessages = __bind(this._resendExistingMessages, this);

    this._dealerRx = __bind(this._dealerRx, this);

    this._dealerTx = __bind(this._dealerTx, this);

    this._routerRx = __bind(this._routerRx, this);

    this._initStore();
    this._initSockets();
    this._bindDealer();
    this._bindRouter();
    this._resendExistingMessages();
  }

  Broker.prototype._initStore = function() {
    var Store, _ref, _ref1,
      _this = this;
    Store = require("./store");
    this.store = new Store((_ref = this.options.store) != null ? _ref.options : void 0);
    return this.queue = new Queue(function(task, next) {
      return _this.store.write(task.id, JSON.stringify(task), next);
    }, ((_ref1 = this.store) != null ? _ref1.maxConnections : void 0) || 1);
  };

  Broker.prototype._initSockets = function() {
    this.router = zmq.socket("router");
    return this.dealer = zmq.socket("dealer");
  };

  Broker.prototype._bindRouter = function() {
    var endpoint;
    endpoint = this.options.router || "ipc:///tmp/queueServer-router";
    this.router.on("message", this._routerRx);
    return this.router.bindSync(endpoint);
  };

  Broker.prototype._bindDealer = function() {
    var endpoint;
    endpoint = this.options.dealer || "ipc:///tmp/queueServer-dealer";
    this.dealer.on("message", this._dealerRx);
    return this.dealer.bind(endpoint);
  };

  Broker.prototype._routerRx = function() {
    var envelopes, payload, task, _i,
      _this = this;
    envelopes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), payload = arguments[_i++];
    task = JSON.parse(payload);
    return this.queue.push(task, function(error) {
      if (typeof err !== "undefined" && err !== null) {
        _this._routerTx(envelopes, {
          id: task.id,
          response: "failed",
          data: err
        });
        return console.error("Failed to write task: %s (%s)", task.id, error);
      } else {
        _this._dealerTx(envelopes, payload);
        _this._routerTx(envelopes, {
          id: task.id,
          response: "submitted"
        });
        return console.log("Task submitted: %s", task.id);
      }
    });
  };

  Broker.prototype._dealerTx = function(envelopes, payload) {
    if (!(payload instanceof Buffer)) {
      payload = JSON.stringify(payload);
    }
    return this.dealer.send([envelopes, payload]);
  };

  Broker.prototype._dealerRx = function() {
    var envelopes, payload, task, _i,
      _this = this;
    envelopes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), payload = arguments[_i++];
    task = JSON.parse(payload);
    switch (task.response) {
      case "completed":
        console.log("Task completed: %s", task.id);
        break;
      case "failed":
        console.error("Task failed: %s (%s)", task.id, task.data);
        break;
      default:
        throw new Error("Unknown response '" + task.response + "'");
    }
    return this.store["delete"](task.id, function(err) {
      if (err != null) {
        return console.error("Failed to delete task: %s (%s)", task.id, err);
      } else {
        return _this._routerTx(envelopes, payload);
      }
    });
  };

  Broker.prototype._routerTx = function(envelopes, payload) {
    if (!(payload instanceof Buffer)) {
      payload = JSON.stringify(payload);
    }
    return this.router.send([envelopes, payload]);
  };

  Broker.prototype._resendExistingMessages = function() {
    var _this = this;
    return this.store.keys(function(err, ids) {
      if (err != null) {
        throw err;
      }
      return async.forEachSeries(ids, _this._resendMessage, function(err) {
        if (err != null) {
          throw err;
        }
      });
    });
  };

  Broker.prototype._resendMessage = function(id, next) {
    var _this = this;
    return this.store.read(id, function(err, data) {
      if (err != null) {
        return next(err);
      } else {
        _this._dealerTx(new Buffer(""), new Buffer(data));
        return next(null);
      }
    });
  };

  return Broker;

})(EventEmitter);
