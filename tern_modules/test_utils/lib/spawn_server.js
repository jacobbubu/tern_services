// Generated by CoffeeScript 1.3.3
var Err, Log, Path, Spawn, coreClass, spawnServer, _SpawnServer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  _this = this;

Log = require('./test_log');

Err = require('tern.exceptions');

Spawn = (require('child_process')).spawn;

Path = require('path');

coreClass = (function() {
  var _instance;

  function coreClass() {}

  _instance = void 0;

  coreClass.get = function() {
    return _instance != null ? _instance : _instance = new _SpawnServer;
  };

  return coreClass;

})();

_SpawnServer = (function() {

  function _SpawnServer() {
    this.stop = __bind(this.stop, this);

    this.start = __bind(this.start, this);

    this.stopOutputMon = __bind(this.stopOutputMon, this);

    this.startOutputMon = __bind(this.startOutputMon, this);

    this.stderrCallback = __bind(this.stderrCallback, this);

    this.stdoutCallback = __bind(this.stdoutCallback, this);

    this.waitForOutput = __bind(this.waitForOutput, this);
    this.spawnServer = null;
  }

  _SpawnServer.prototype.waitForOutput = function(pattern, next) {
    var stderrCallback, stdoutCallback,
      _this = this;
    if (this.spawnServer == null) {
      return next();
    }
    stdoutCallback = function(data) {
      var message;
      message = data.toString();
      if (pattern.test(message)) {
        _this.spawnServer.stdout.removeListener('data', stdoutCallback);
        _this.spawnServer.stderr.removeListener('data', stderrCallback);
        return next();
      }
    };
    stderrCallback = function(data) {
      var message;
      message = data.toString();
      if (pattern.test(message)) {
        _this.spawnServer.stdout.removeListener('data', stdoutCallback);
        _this.spawnServer.stderr.removeListener('data', stderrCallback);
        return next();
      }
    };
    this.spawnServer.stdout.on('data', stdoutCallback);
    return this.spawnServer.stderr.on('data', stderrCallback);
  };

  _SpawnServer.prototype.stdoutCallback = function(data) {
    var message;
    message = data.toString();
    return Log.serverLog(message);
  };

  _SpawnServer.prototype.stderrCallback = function(data) {
    var message;
    message = data.toString();
    return Log.serverError(message);
  };

  _SpawnServer.prototype.startOutputMon = function() {
    this.spawnServer.stdout.on('data', this.stdoutCallback);
    return this.spawnServer.stderr.on('data', this.stderrCallback);
  };

  _SpawnServer.prototype.stopOutputMon = function() {
    this.spawnServer.stdout.removeListener('data', this.stdoutCallback);
    return this.spawnServer.stderr.removeListener('data', this.stderrCallback);
  };

  _SpawnServer.prototype.start = function(serverPath, pattern, next) {
    var ext, p;
    if (serverPath == null) {
      throw Err.ArgumentNullException('serverPath required');
    }
    if (pattern == null) {
      throw Err.ArgumentNullException('pattern required');
    }
    ext = Path.extname(serverPath);
    switch (ext) {
      case '.js':
        p = 'node';
        break;
      case '.coffee':
        p = 'coffee';
        break;
      default:
        throw new Error('Unknown program type:' + serverPath);
    }
    this.spawnServer = Spawn(p, [serverPath]);
    this.startOutputMon();
    return this.waitForOutput(pattern, next);
  };

  _SpawnServer.prototype.stop = function(next) {
    var _this = this;
    if (this.spawnServer == null) {
      return next();
    }
    this.stopOutputMon();
    this.spawnServer.once('exit', function(code, signal) {
      return next(null, code, signal);
    });
    this.spawnServer.kill('SIGINT');
    return this.spawnServer = null;
  };

  return _SpawnServer;

})();

spawnServer = coreClass.get();

module.exports.start = function(serverPath, pattern, next) {
  return spawnServer.start(serverPath, pattern, function() {
    if (next != null) {
      return next();
    }
  });
};

module.exports.stop = function(next) {
  return spawnServer.stop(function(err, code, signal) {
    if (next != null) {
      return next(err, code, signal);
    }
  });
};

module.exports.serverProcess = function() {
  return spawnServer.spawnServer;
};
