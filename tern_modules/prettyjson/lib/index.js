// Generated by CoffeeScript 1.3.3
var Utils, fs;

module.exports = exports;

Utils = require('./utils');

fs = require('fs');

exports.version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;

/* Render function
  *Parameters:*

  * **`data`**: Data to render
  * **`options`**: Hash with different options to configure the parser
  * **`indentation`**: Base indentation of the parsed output

  *Example of options hash:*
    
     {
       emptyArrayMsg: '(empty)', // Rendered message on empty strings
       defaultIndentation: 2     // Indentation on nested objects
     }
*/


exports.render = function(data, options, indentation) {
  var i, isSerializable, key, maxIndexLength, output, sortedKeys, _i, _len;
  indentation = indentation || 0;
  options = options || {};
  options.emptyArrayMsg = options.emptyArrayMsg || '(empty array)';
  options.defaultIndentation = options.defaultIndentation || 2;
  output = [];
  isSerializable = function(input) {
    if (typeof input === 'string' || typeof input === 'boolean' || typeof input === 'number' || input === null) {
      return true;
    }
    return false;
  };
  if (isSerializable(data)) {
    output.push(Utils.indent(indentation) + data);
  } else {
    if (Array.isArray(data)) {
      if (data.length === 0) {
        output.push(Utils.indent(indentation) + options.emptyArrayMsg);
      } else {
        data.forEach(function(element) {
          var line;
          line = Utils.indent(indentation) + '- ';
          if (typeof element === 'string') {
            line += exports.render(element, options);
            return output.push(line);
          } else {
            output.push(line);
            return output.push(exports.render(element, options, indentation + options.defaultIndentation));
          }
        });
      }
    } else {
      if (typeof data === 'object') {
        maxIndexLength = Utils.getMaxIndexLength(data);
        key;

        sortedKeys = (Object.keys(data)).sort();
        for (_i = 0, _len = sortedKeys.length; _i < _len; _i++) {
          i = sortedKeys[_i];
          key = Utils.indent(indentation) + i + ': ';
          if (isSerializable(data[i])) {
            key += exports.render(data[i], options, maxIndexLength - i.length);
            output.push(key);
          } else {
            output.push(key);
            output.push(exports.render(data[i], options, indentation + options.defaultIndentation));
          }
        }
      }
    }
  }
  return output.join('\n');
};
