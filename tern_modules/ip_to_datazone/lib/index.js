// Generated by CoffeeScript 1.3.3
var CODE_TO_ZONE, DBClass, DEFAULT_DATA_ZONE, InternalAClasses, InternalBClasses, InternalCClasses, LoopbackIP, Path, fourthOctets, geoDB, getPattern, ipPattern, ipToDataZone, isInternalIP, isLoopbackIP, secondOctets, thirdOctets;

DBClass = require('node-iplookup').DB;

Path = require('path');

geoDB = new DBClass(Path.resolve(__dirname, '../IpToCountry.csv'));

getPattern = function() {
  var ip, octet, quad;
  octet = '(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])';
  ip = '(?:' + octet + '\\.){3}' + octet;
  quad = '(?:\\[' + ip + '\\])|(?:' + ip + ')';
  return new RegExp('(' + quad + ')');
};

ipPattern = getPattern();

DEFAULT_DATA_ZONE = 'virginia';

CODE_TO_ZONE = {
  'BR': 'sao_paulo',
  'CN': 'beijing',
  'GB': 'ireland',
  'JP': 'tokyo',
  'SG': 'singapore',
  'US': 'virginia'
};

ipToDataZone = function(ip, next) {
  if (ipPattern.test(ip) === false) {
    throw new Error("Bad ip format: " + ip);
  }
  return geoDB.lookup(ip, function(err, result) {
    var country_code, data_zone;
    console.log(ip);
    if (err != null) {
      return next(null, DEFAULT_DATA_ZONE);
    }
    country_code = result.code;
    data_zone = CODE_TO_ZONE[country_code];
    if (data_zone == null) {
      data_zone = DEFAULT_DATA_ZONE;
    }
    return next(null, data_zone);
  });
};

fourthOctets = 256 * 256 * 256;

thirdOctets = 256 * 256;

secondOctets = 256;

InternalAClasses = {
  min: 10 * fourthOctets + 0 * thirdOctets + 0 * secondOctets + 0,
  max: 10 * fourthOctets + 255 * thirdOctets + 255 * secondOctets + 255
};

InternalBClasses = {
  min: 172 * fourthOctets + 16 * thirdOctets + 0 * secondOctets + 0,
  max: 172 * fourthOctets + 31 * thirdOctets + 255 * secondOctets + 255
};

InternalCClasses = {
  min: 192 * fourthOctets + 168 * thirdOctets + 0 * secondOctets + 0,
  max: 192 * fourthOctets + 168 * thirdOctets + 255 * secondOctets + 255
};

isInternalIP = function(ip) {
  var ipArray, ipNumber;
  if (ipPattern.test(ip) === false) {
    throw new Error("Bad ip format: " + ip);
  }
  ipArray = ip.split('.');
  ipNumber = Number(ipArray[0]) * fourthOctets + Number(ipArray[1]) * thirdOctets + Number(ipArray[2]) * secondOctets + Number(ipArray[3]);
  if (((InternalAClasses.min <= ipNumber && ipNumber <= InternalAClasses.max)) || ((InternalBClasses.min <= ipNumber && ipNumber <= InternalBClasses.max)) || ((InternalCClasses.min <= ipNumber && ipNumber <= InternalCClasses.max))) {
    return true;
  } else {
    return false;
  }
};

LoopbackIP = {
  min: 127 * fourthOctets + 0 * thirdOctets + 0 * secondOctets + 1,
  max: 127 * fourthOctets + 255 * thirdOctets + 255 * secondOctets + 254
};

isLoopbackIP = function(ip) {
  var ipArray, ipNumber;
  if (ipPattern.test(ip) === false) {
    throw new Error("Bad ip format: " + ip);
  }
  ipArray = ip.split('.');
  ipNumber = Number(ipArray[0]) * fourthOctets + Number(ipArray[1]) * thirdOctets + Number(ipArray[2]) * secondOctets + Number(ipArray[3]);
  if ((LoopbackIP.min <= ipNumber && ipNumber <= LoopbackIP.max)) {
    return true;
  } else {
    return false;
  }
};

module.exports.lookup = function(ip, next) {
  return ipToDataZone(ip, function(err, data_zone) {
    if (next != null) {
      return next(err, data_zone);
    }
  });
};

module.exports.isInternalIP = isInternalIP;

module.exports.isLoopbackIP = isLoopbackIP;
