// Generated by CoffeeScript 1.3.3
var Broker, getConfig, getEndpointFromConfigValue, init, internals;

Broker = require('./broker');

internals = {
  globalBroker: null,
  zoneBroker: null
};

init = function(globalConfigOpts, zoneConfigOpts, next) {
  var globalBroker, zoneBroker;
  if ((internals.globalBroker != null) || (internals.zoneBroker != null)) {
    return next();
  }
  if (globalConfigOpts == null) {
    globalConfigOpts = {
      requester: 'tcp://127.0.0.1:21001',
      subscriber: 'tcp://127.0.0.1:21002'
    };
  }
  if (zoneConfigOpts == null) {
    zoneConfigOpts = {
      requester: 'tcp://127.0.0.1:21101',
      subscriber: 'tcp://127.0.0.1:21102'
    };
  }
  globalBroker = new Broker(globalConfigOpts);
  zoneBroker = new Broker(zoneConfigOpts);
  return globalBroker.init(function(configObj) {
    return zoneBroker.init(function(configObj) {
      internals.globalBroker = globalBroker;
      internals.zoneBroker = zoneBroker;
      return next();
    });
  });
};

getConfig = function(path) {
  var config, globalBroker, zoneBroker;
  zoneBroker = internals.zoneBroker;
  globalBroker = internals.globalBroker;
  config = null;
  if (zoneBroker != null) {
    try {
      config = zoneBroker.getConfig(path);
      return config;
    } catch (e) {

    }
  }
  if (globalBroker != null) {
    try {
      config = globalBroker.getConfig(path);
      return config;
    } catch (e) {

    }
  }
  return config;
};

getEndpointFromConfigValue = function(value) {
  var endpoint, host, port, protocol;
  protocol = value.protocol, host = value.host, port = value.port;
  if (port != null) {
    return endpoint = "" + protocol + "://" + host + ":" + port;
  } else {
    return endpoint = "" + protocol + "://" + host;
  }
};

module.exports.getConfig = function(path) {
  return getConfig(path);
};

module.exports.getEndpointFromConfigValue = function(value) {
  return getEndpointFromConfigValue(value);
};

module.exports.getEndpointFromPath = function(path) {
  return getEndpointFromConfigValue((getConfig(path)).value);
};

module.exports.init = function() {
  var globalConfigOpts, next, zoneConfigOpts;
  switch (arguments.length) {
    case 0:
      globalConfigOpts = null;
      zoneConfigOpts = null;
      next = null;
      break;
    case 1:
      globalConfigOpts = null;
      zoneConfigOpts = null;
      next = arguments[0];
      break;
    case 2:
      globalConfigOpts = arguments[0];
      zoneConfigOpts = null;
      next = arguments[1];
      break;
    case 3:
      globalConfigOpts = arguments[0];
      zoneConfigOpts = arguments[1];
      next = arguments[2];
  }
  return init(globalConfigOpts, zoneConfigOpts, function() {
    return (next != null) && next();
  });
};
