// Generated by CoffeeScript 1.3.3
var Coffee, FS, Path, Server, Utils, WatchFolder, zmq,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

zmq = require('zmq');

Path = require('path');

Coffee = require('coffee-script');

FS = require('fs');

WatchFolder = require('watch');

Utils = require('./utils');

module.exports = Server = (function() {

  function Server(options) {
    var _this = this;
    this.options = options != null ? options : {};
    this._publisherRx = __bind(this._publisherRx, this);

    this._responderRx = __bind(this._responderRx, this);

    this._readConfigFile = __bind(this._readConfigFile, this);

    this.configObject = null;
    this.configFileName = Path.resolve(__dirname, this.options.configFilename || '../config_file/config.coffee');
    this.configFileName = FS.realpathSync(this.configFileName);
    this._readConfigFile(this.configFileName);
    this._initSockets();
    this._bindResponder();
    this._bindPublisher(function() {
      return _this._watchConfigFile(_this.configFileName);
    });
  }

  Server.prototype._readConfigFile = function(fileName) {
    var newConfig;
    delete require.cache[fileName];
    try {
      newConfig = require(fileName);
    } catch (err) {
      console.error('Configuration reading failed:', err.toString, err.stack);
      if (this.configObject === null) {
        throw err;
      }
      return;
    }
    if (this.configObject === null) {
      return this.configObject = newConfig;
    } else {
      if (!Utils.deepEquals(newConfig, this.configObject)) {
        this.configObject = newConfig;
        return this.publisher.send('config' + ' ' + JSON.stringify(newConfig));
      }
    }
  };

  Server.prototype._initSockets = function() {
    this.responder = zmq.socket("rep");
    return this.publisher = zmq.socket("pub");
  };

  Server.prototype._bindResponder = function(next) {
    var endpoint,
      _this = this;
    endpoint = this.options.responder || "ipc:///tmp/configServer-req";
    this.responder.on("message", this._responderRx);
    return this.responder.bind(endpoint, function() {
      console.log("Responder listening on %s", endpoint);
      return (next != null) && next();
    });
  };

  Server.prototype._bindPublisher = function(next) {
    var endpoint,
      _this = this;
    endpoint = this.options.publisher || "ipc:///tmp/configServer-sub";
    return this.publisher.bind(endpoint, function() {
      console.log("Publisher listening on %s", endpoint);
      return (next != null) && next();
    });
  };

  Server.prototype._watchConfigFile = function(fileName) {
    var dirName,
      _this = this;
    dirName = Path.dirname(fileName);
    return WatchFolder.createMonitor(dirName, {
      persistent: true,
      interval: 2003
    }, function(monitor) {
      var isTheFile;
      isTheFile = function(f, fileName) {
        var changedFile, originalFile;
        changedFile = Path.basename(f) + '.' + Path.extname(f);
        originalFile = Path.basename(fileName) + '.' + Path.extname(fileName);
        return changedFile === originalFile;
      };
      monitor.on("created", function(f, stat) {
        if (isTheFile(f, fileName)) {
          console.log('Config file created');
          return _this._readConfigFile(fileName);
        }
      });
      monitor.on("changed", function(f, curr, prev) {
        if (isTheFile(f, fileName)) {
          console.log('Config file changed');
          return _this._readConfigFile(fileName);
        }
      });
      return monitor.on("removed", function(f, stat) {
        if (isTheFile(f, fileName)) {
          return console.log('Config file removed');
        }
      });
    });
  };

  Server.prototype._responderRx = function(payload) {
    var message;
    message = payload.toString();
    if (message === 'getConfig') {
      return this.responder.send(JSON.stringify(this.configObject));
    }
  };

  Server.prototype._publisherRx = function(payload) {};

  return Server;

})();
