// Generated by CoffeeScript 1.3.3
var Log, Tokens, Utils, ZMQStatusCodes;

Log = require('tern.logger');

Tokens = require('../models/token_mod');

Utils = require('tern.utils');

ZMQStatusCodes = require('tern.zmq_helper').zmq_status_codes;

/*
  Request example: 
  {
    req_ts  : 1337957267701,
    request: {
      method  : 'tokenAuth'
      data: {
        access_token: 'xxxxxxxxxx'
      }
    }
  }

  Response example: 
  {
    req_ts  : 1337957267701
    Response: {
      method  : 'tokenAuth'
      status  : 200
      data: {
        access_token: 'xxxxxxxxxx'
      }
    }
  }

  Error example: 
  {
    req_ts  : 1337957267701
    Response: {
      method  : 'tokenAuth'
      status  : 400
      error   : "'req_ts' in message required."
    }
  }
*/


exports.processMessage = function(message, next) {
  var accessToken, dropError, method, response, _ref;
  dropError = function(status, description) {
    var response;
    response = {
      response: {
        status: status,
        error: description
      }
    };
    if (next != null) {
      return next(null, response);
    }
  };
  if (message.req_ts == null) {
    return dropError(ZMQStatusCodes.BadRequest, "'req_ts' in message required.");
  }
  if (message.request == null) {
    return dropError(ZMQStatusCodes.BadRequest, "'request' in message required.");
  }
  method = message.request.method;
  if (method == null) {
    return dropError("'request.method' in message required.");
  }
  method = method.trim();
  switch (method.toLowerCase()) {
    case 'ping':
      response = {
        response: {
          status: ZMQStatusCodes.OK
        }
      };
      if (next != null) {
        return next(null, response);
      }
      break;
    case 'tokenauth':
      if (((_ref = message.request.data) != null ? _ref.access_token : void 0) == null) {
        return dropError("'request.data.access_token' in message required.");
      }
      accessToken = message.request.data.access_token;
      return Tokens.tokenAuth(accessToken, function(err, res) {
        if (err != null) {
          return next(err);
        } else {
          response = {
            response: res
          };
          if (next != null) {
            return next(null, response);
          }
        }
      });
    default:
      response = {
        response: {
          status: ZMQStatusCodes.MethodNotAllowed
        }
      };
      if (next != null) {
        return next(null, response);
      }
  }
};
