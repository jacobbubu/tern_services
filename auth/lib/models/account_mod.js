// Generated by CoffeeScript 1.3.3
var Cache, Checker, Clients, Consts, DB, DataZones, Err, Log, Perf, Tokens, UserTableKey, Utils, accountModel, coreClass, _AccountModel,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  _this = this;

Log = require('tern.logger');

Perf = require('tern.perf_counter');

Utils = require('tern.utils');

DB = require('tern.database');

Checker = require('tern.param_checker');

Err = require('tern.exceptions');

Consts = require('tern.consts');

DataZones = require('tern.data_zones');

Cache = require('tern.cache');

Clients = require('./client_mod');

Tokens = require('./token_mod');

/*
# Redis Database
# User table: 
#   type: HASH
#   key:  users/user_id
#
*/


UserTableKey = function(user_id) {
  return "users/-PLACEHOLDER-".replace('-PLACEHOLDER-', user_id);
};

coreClass = (function() {
  var _instance;

  function coreClass() {}

  _instance = void 0;

  coreClass.get = function() {
    return _instance != null ? _instance : _instance = new _AccountModel;
  };

  return coreClass;

})();

/*
# Class Definition
*/


_AccountModel = (function() {

  function _AccountModel() {
    this.renewTokens = __bind(this.renewTokens, this);

    this.unique = __bind(this.unique, this);

    this.signup = __bind(this.signup, this);

    this.save = __bind(this.save, this);

    this.prepareDataObject = __bind(this.prepareDataObject, this);

    this.validate_data_zone = __bind(this.validate_data_zone, this);

    this.validate_locale = __bind(this.validate_locale, this);

    this.validate_password = __bind(this.validate_password, this);

    this.validate_user_id = __bind(this.validate_user_id, this);

    this.validate_client = __bind(this.validate_client, this);

    this["delete"] = __bind(this["delete"], this);
    this.db = DB.getDB('accountDB');
  }

  /*
    # methdos
  */


  _AccountModel.prototype["delete"] = function(user_id, next) {
    var key;
    if (!(user_id != null)) {
      throw new Err.ArgumentNullException("'user_id' required.");
    }
    key = UserTableKey(user_id);
    console.log('_name, _dbid', this.db._name, this.db._dbid);
    return this.db.del_keys(key, function(err, res) {
      return next(err, res);
    });
  };

  _AccountModel.prototype.validate_client = function(client_id, client_secret, next) {
    if (Checker.isEmpty(client_id)) {
      next(new Err.ArgumentsNullException("client_id required", null));
      return;
    }
    if (Checker.isEmpty(client_secret)) {
      next(new Err.ArgumentsNullException("client_secret required", null));
      return;
    }
    return Clients.authenticate(client_id, client_secret, function(err, authed) {
      return next(err, authed);
    });
  };

  _AccountModel.prototype.push_error = function(error, field, value) {
    if (!(error != null)) {
      error = {};
    }
    if (!(error[field] != null)) {
      error[field] = [];
    }
    error[field].push(value);
    return error;
  };

  _AccountModel.prototype.validate_user_id = function(user_id, error) {
    if (Checker.isEmpty(user_id)) {
      error = this.push_error(error, 'user_id', 'REQUIRED');
    }
    if (!Checker.isLengthIn(user_id, 4, 24)) {
      error = this.push_error(error, 'user_id', 'LENGTH');
    }
    if (!Checker.isMatched(user_id, /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/)) {
      error = this.push_error(error, 'user_id', 'PATTERN');
    }
    return error;
  };

  _AccountModel.prototype.validate_password = function(password, error) {
    if (Checker.isEmpty(password)) {
      error = this.push_error(error, 'password', 'REQUIRED');
    }
    if (!Checker.isLengthIn(password, 6, 24)) {
      error = this.push_error(error, 'password', 'LENGTH');
    }
    if (!Checker.isMatched(password, /[0-9]+/)) {
      error = this.push_error(error, 'password', 'DIGIT');
    }
    if (!Checker.isMatched(password, /[A-Z]+/)) {
      error = this.push_error(error, 'password', 'CAPITAL');
    }
    if (!Checker.isMatched(password, /[a-z]+/)) {
      error = this.push_error(error, 'password', 'LOWERCASE');
    }
    return error;
  };

  _AccountModel.prototype.splitLocale = function(loc) {
    var arr, lang, region, script;
    arr = loc.match(/[a-z]+/gi);
    switch (arr.length) {
      case 1:
        lang = arr[0].toLowerCase();
        break;
      case 2:
        lang = arr[0].toLowerCase();
        region = arr[1].toUpperCase();
        break;
      case 3:
        lang = arr[0].toLowerCase();
        script = arr[1].toLowerCase();
        region = arr[2].toUpperCase();
    }
    return [lang, script, region];
  };

  _AccountModel.prototype.validate_locale = function(locale, error) {
    var lang, region, script, _ref;
    if (Checker.isEmpty(locale)) {
      error = this.push_error(error, 'locale', 'REQUIRED');
    }
    _ref = this.splitLocale(locale), lang = _ref[0], script = _ref[1], region = _ref[2];
    if (!(Consts.languages[lang] != null)) {
      error = this.push_error(error, 'locale', 'LANG');
    }
    if (!(Consts.countries[region] != null)) {
      error = this.push_error(error, 'locale', 'REGION');
    }
    if ((script != null) && !(Consts.lang_scripts[script] != null)) {
      error = this.push_error(error, 'locale', 'SCRIPT');
    }
    return error;
  };

  _AccountModel.prototype.validate_data_zone = function(data_zone, error) {
    if (Checker.isEmpty(data_zone)) {
      error = this.push_error(error, 'data_zone', 'REQUIRED');
    }
    if (!Checker.isLengthIn(data_zone, 0, 64)) {
      error = this.push_error(error, 'data_zone', 'LENGTH');
    }
    if (!(DataZones.get(data_zone) != null)) {
      error = this.push_error(error, 'data_zone', 'UNSUPPORTED');
    }
    return error;
  };

  /*
    validate_device_id: (device_id, error) =>
  
      error = @push_error error, 'device_id', 'LENGTH' if not Checker.isLengthIn(device_id, 0, 64)
      return error
  */


  _AccountModel.prototype.prepareDataObject = function(user_object) {
    var lang, region, result, script, _ref;
    result = {};
    result.password = Utils.passwordHash(user_object.password.trim());
    /*
        if user_object.device_id?
          result.device_id  = user_object.device_id.trim()
        else
          result.device_id  = ""
    */

    result.data_zone = user_object.data_zone.trim();
    if (user_object.locale != null) {
      result.locale = user_object.locale.trim();
    }
    _ref = this.splitLocale(user_object.locale), lang = _ref[0], script = _ref[1], region = _ref[2];
    if (region != null) {
      result.region = region;
    }
    if (region != null) {
      result.currency = Consts.country_info[region].currency;
    }
    if (lang != null) {
      result.lang = lang;
    }
    if (script != null) {
      result.lang_script = script;
    }
    result.create_at = (new Date).toISOString();
    return result;
  };

  _AccountModel.prototype.save = function(user_object, next) {
    var args, k, key, script, user_data, user_id, v,
      _this = this;
    user_id = user_object.user_id.trim();
    user_data = this.prepareDataObject(user_object);
    key = UserTableKey(user_id);
    script = "local exist = redis.call('EXISTS', KEYS[1])\nif exist == 0 then\n  local len = #ARGV\n  \n  for i = 1, len, 2 do\n    redis.call('HSET', KEYS[1], ARGV[i], ARGV[i+1])\n  end\n\n  return 0\nelse\n  return 1\nend";
    args = [1, key];
    for (k in user_data) {
      v = user_data[k];
      args.push(k);
      args.push(v);
    }
    return this.db.run_script(script, args, function(err, exist) {
      if (err != null) {
        return next(err, null);
      } else {
        return next(null, exist === 1);
      }
    });
  };

  /*
    # signup: create a new user
    # 
    # return:
    #   status =  0 -SUCCEEDED
    #   status = -1 -BAD ARGUMENTS, error object includes the detail
    #   status = -2 -user_id exists already
    #   status = -3 -Client authentication failed
  */


  _AccountModel.prototype.signup = function(client_id, user_object, next) {
    var error, result,
      _this = this;
    result = {};
    result.status = 0;
    error = null;
    try {
      error = this.validate_user_id(user_object.user_id, error);
      error = this.validate_password(user_object.password, error);
      if ((user_object.user_id != null) && (user_object.password != null) && user_object.user_id.trim() === user_object.password.trim()) {
        error = this.push_error(error, 'password', 'SAME_AS_USER_ID');
      }
      error = this.validate_locale(user_object.locale, error);
      error = this.validate_data_zone(user_object.data_zone, error);
    } catch (e) {
      next(e);
    }
    if (error != null) {
      return next(null, {
        'status': -1,
        'error': error
      });
    }
    return this.save(user_object, function(err, exist) {
      if (err != null) {
        return next(err, null);
      } else {
        if (exist) {
          result.status = -2;
          return next(null, result);
        } else {
          return Clients.lookup(client_id, function(err, client) {
            var scope;
            if (err != null) {
              return next(err, null);
            } else {
              if (client.scope != null) {
                scope = client.scope.join(' ');
              } else {
                scope = '';
              }
              return Tokens["new"](user_object.user_id, client_id, scope, user_object.data_zone, client.ttl, function(err, tokens) {
                return next(err, tokens);
              });
            }
          });
        }
      }
    });
  };

  _AccountModel.prototype.unique = function(user_id, next) {
    var key, result;
    result = {
      status: 0,
      result: false
    };
    try {
      if (Checker.isEmpty(user_id)) {
        next(null, result);
        return;
      }
      user_id = user_id.toString();
    } catch (e) {
      next(e, null);
      return;
    }
    key = UserTableKey(user_id);
    return this.db.exists(key, function(err, res) {
      if (err != null) {
        return next(err, null);
      } else {
        result.result = res === 0;
        return next(null, result);
      }
    });
  };

  _AccountModel.prototype.refreshToken = function(client_id, refreshToken, next) {
    return Clients.lookup(client_id, function(err, client) {
      var ttl;
      if (err != null) {
        return next(err);
      }
      if (client != null) {
        ttl = client.ttl;
        return Tokens.refresh(client_id, refreshToken, ttl, function(err, tokens) {
          return next(err, tokens);
        });
      } else {
        return next(new Error("Invalid client_id ('" + client_id + "')."));
      }
    });
  };

  _AccountModel.prototype.renewTokens = function(client_id, user_object, next) {
    var error, password, user_id,
      _this = this;
    error = null;
    user_id = user_object.user_id;
    password = user_object.password;
    try {
      if (Checker.isEmpty(user_id)) {
        error = this.push_error(error, 'user_id', 'REQUIRED');
      }
      if (Checker.isEmpty(password)) {
        error = this.push_error(error, 'password', 'REQUIRED');
      }
    } catch (e) {
      next(e);
    }
    if (error != null) {
      return next(null, {
        'status': -1,
        'error': error
      });
    }
    return Clients.lookup(client_id, function(err, client) {
      var key, scope, ttl;
      if (err != null) {
        return next(err);
      }
      if (client != null) {
        ttl = client.ttl;
        scope = client.scope.join(" ");
        key = UserTableKey(user_id);
        return _this.db.hmget(key, 'password', 'data_zone', function(err, result) {
          var data_zone, passwordHash;
          if (err != null) {
            return next(err);
          }
          if (result == null) {
            return next(null, {
              'status': -4
            });
          }
          passwordHash = result[0];
          data_zone = result[1];
          if (!Utils.verifyPassword(password.trim(), passwordHash)) {
            return next(null, {
              'status': -4
            });
          }
          return Tokens["new"](user_id, client_id, scope, data_zone, ttl, function(err, tokens) {
            return next(err, tokens);
          });
        });
      } else {
        return next(new Error("Invalid client_id ('" + client_id + "')."));
      }
    });
  };

  return _AccountModel;

})();

/*
# Module Exports
*/


accountModel = coreClass.get();

module.exports["delete"] = function(user_id, next) {
  return accountModel["delete"](user_id, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

exports.signup = function(client_id, user_object, next) {
  return accountModel.signup(client_id, user_object, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

exports.unique = function(user_id, next) {
  return accountModel.unique(user_id, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

exports.refreshToken = function(client_id, refreshToken, next) {
  return accountModel.refreshToken(client_id, refreshToken, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

exports.renewTokens = function(client_id, user_object, next) {
  return accountModel.renewTokens(client_id, user_object, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};
