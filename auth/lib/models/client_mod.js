// Generated by CoffeeScript 1.3.3
var Async, BrokersHelper, CODE_LENGTH, Cache, Checker, ClientScopeTableKey, ClientTableKey, Consts, DB, Err, ID_PREFIX, LONG_TTL, Log, Perf, SHORT_TTL, Utils, clientModel, coreClass, internals, _ClientModel,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  _this = this;

Async = require("async");

BrokersHelper = require('tern.central_config').BrokersHelper;

Log = require('tern.logger');

Perf = require('tern.perf_counter');

Utils = require('tern.utils');

DB = require('tern.database');

Checker = require('tern.param_checker');

Err = require('tern.exceptions');

Consts = require('tern.consts');

Cache = require('tern.cache');

/*
# Consts
*/


ID_PREFIX = '3rd:';

CODE_LENGTH = 128;

LONG_TTL = 10 * 365 * 24 * 3600;

SHORT_TTL = 24 * 3600;

/*
# Redis Database
# Client table: 
#   type: HASH
#   key:  clients/client_id
# 
# Client scope table
#   type: SET
#   key:  clients/client_id/scope
*/


ClientTableKey = function(client_id) {
  return "clients/-PLACEHOLDER-".replace('-PLACEHOLDER-', client_id);
};

ClientScopeTableKey = function(client_id) {
  return "clients/-PLACEHOLDER-/scope".replace('-PLACEHOLDER-', client_id);
};

coreClass = (function() {
  var _instance;

  function coreClass() {}

  _instance = void 0;

  coreClass.get = function() {
    return _instance != null ? _instance : _instance = new _ClientModel;
  };

  return coreClass;

})();

/*
# Class Definition
*/


_ClientModel = (function() {

  function _ClientModel() {
    this.setSuspended = __bind(this.setSuspended, this);

    this.authenticate = __bind(this.authenticate, this);

    this.lookup = __bind(this.lookup, this);

    this.save = __bind(this.save, this);

    this.clearAll = __bind(this.clearAll, this);
    this.db = DB.getDB('clientDB');
    this.cache = new Cache("clients", {
      size: 10,
      expiry: 60000
    });
  }

  _ClientModel.prototype.stockClients = {
    'tern_iPhone': {
      secret: 'Ob-Kp_rWpnHbQ0h059uvJX',
      grant_type: 'password',
      scope: ["addMemo", "delMemo"],
      ttl: LONG_TTL,
      pre_defined: 1
    },
    'tern_iPad': {
      secret: 'T3u_mR4v-GuorQPHSrvv1R',
      grant_type: 'password',
      scope: [],
      ttl: LONG_TTL,
      pre_defined: 1
    },
    'tern_osx': {
      secret: 'zWsqh7jz74GqO3Rpzatfcd',
      grant_type: 'password',
      scope: [],
      ttl: LONG_TTL,
      pre_defined: 1
    },
    'tern_web': {
      secret: 'jUegvKSb5NYNCFhrWGrnb3',
      grant_type: 'password',
      scope: [],
      ttl: LONG_TTL,
      pre_defined: 1
    },
    '3rd:4Wrc9SdnbQmlDKuKxE02XV': {
      secret: '1MSTBaANwd8hcTVkLxx0d1',
      grant_type: 'code',
      scope: [],
      ttl: SHORT_TTL,
      pre_defined: 1,
      redirect_uri: 'http://localhost:3000/',
      suspended: 0
    }
  };

  /*
    # methdos
  */


  _ClientModel.prototype.clearAll = function(next) {
    return this.db.del_keys("clients/*", function(err, res) {
      return next(err, res);
    });
  };

  _ClientModel.prototype.save = function(client, next) {
    var args, client_id, data, k, key, scope, scopeKey, script, v, _ref,
      _this = this;
    client_id = Object.keys(client)[0];
    data = Utils.clone(client[client_id]);
    scope = (_ref = data.scope) != null ? _ref : [];
    delete data.scope;
    key = ClientTableKey(client_id);
    scopeKey = ClientScopeTableKey(client_id);
    script = "local exist = redis.call('EXISTS', KEYS[1])\nif exist == 0 then\n  local len = #ARGV\n  \n  for i = 1, len-1, 2 do\n    redis.call('HSET', KEYS[1], ARGV[i], ARGV[i+1])\n  end\n\n  local scope = ARGV[len]\n  for s in string.gmatch(scope, \"[^%s]+\") do \n    redis.call('SADD', KEYS[2], s)\n  end\n\n  return 0\nelse\n  return 1\nend";
    args = [2, key, scopeKey];
    for (k in data) {
      v = data[k];
      args.push(k);
      args.push(v);
    }
    args.push(scope.join(' '));
    return this.db.run_script(script, args, function(err, exist) {
      if (err != null) {
        return next(err, null);
      } else {
        return next(null, exist === 1);
      }
    });
  };

  _ClientModel.prototype.populate = function(next) {
    var c, clientArr, obj, v, _ref;
    clientArr = [];
    _ref = this.stockClients;
    for (c in _ref) {
      v = _ref[c];
      obj = new Object;
      obj[c] = v;
      clientArr.push(obj);
    }
    return Async.map(clientArr, this.save, function(err, res) {
      if (next != null) {
        return next(err, res);
      }
    });
  };

  _ClientModel.prototype.lookup = function(client_id, next) {
    var client, key, scopeKey, script,
      _this = this;
    if (!(client_id != null)) {
      throw new Err.ArgumentNullException("'client_id' required.");
    }
    key = ClientTableKey(client_id);
    scopeKey = ClientScopeTableKey(client_id);
    script = "return {redis.call('HGETALL', KEYS[1]), redis.call('SMEMBERS', KEYS[2])}    ";
    client = this.cache.get(client_id);
    if (client != null) {
      return next(null, client);
    } else {
      return this.db.run_script(script, 2, key, scopeKey, function(err, res) {
        var i, v, _i, _len, _ref, _step;
        if (err != null) {
          return next(err);
        } else {
          if (res[0].length > 0) {
            client = {
              client_id: client_id
            };
            _ref = res[0];
            for (i = _i = 0, _len = _ref.length, _step = 2; _i < _len; i = _i += _step) {
              v = _ref[i];
              client[v] = res[0][i + 1];
            }
            client.ttl = parseInt(client.ttl);
            if (res[1] != null) {
              client.scope = res[1];
            }
            _this.cache.set(client_id, client);
            return next(null, client);
          } else {
            return next(null, null);
          }
        }
      });
    }
  };

  _ClientModel.prototype.authenticate = function(client_id, client_secret, next) {
    var client, key,
      _this = this;
    if (!(client_id != null)) {
      throw new Err.ArgumentNullException("'client_id' required.");
    }
    if (!(client_secret != null)) {
      throw new Err.ArgumentNullException("'client_secret' required.");
    }
    key = ClientTableKey(client_id);
    client = this.cache.get(client_id);
    if (client != null) {
      return next(null, client.secret === client_secret);
    } else {
      return this.lookup(client_id, function(err, client) {
        if (err != null) {
          return next(err);
        } else {
          if (client != null) {
            return next(null, client.secret === client_secret);
          } else {
            return next(null, false);
          }
        }
      });
    }
  };

  _ClientModel.prototype.setSuspended = function(client_id, suspended, next) {
    var key, script, value,
      _this = this;
    if (!(client_id != null)) {
      throw new Err.ArgumentNullException("'client_id' required.");
    }
    if (typeof suspended !== 'boolean') {
      throw new TypeError("Type of 'suspended' should be boolean");
    }
    key = ClientTableKey(client_id);
    script = "local result\nlocal exist = redis.call('EXISTS', KEYS[1])\nif exist == 0 then \n  result = nil\nelse \n  result = redis.call('HGET', KEYS[1], 'suspended')\n  if result == nil then \n    result = '0'\n  end\n  redis.call('HSET', KEYS[1], 'suspended', ARGV[1]);\nend\nreturn result";
    value = 0;
    if (suspended) {
      value = 1;
    }
    return this.db.run_script(script, 1, key, value, function(err, oldValue) {
      if (err != null) {
        return next(err, null);
      } else {
        _this.cache.del(client_id);
        return next(null, oldValue);
      }
    });
  };

  return _ClientModel;

})();

internals = {
  configObj: null,
  config: null,
  configInit: function() {
    var clientModel, clients, config, _ref, _ref1;
    clientModel = coreClass.get();
    clients = clientModel.stockClients;
    config = internals.config;
    if (((_ref = config["default"]) != null ? _ref.ttl : void 0) != null) {
      clientModel.default_ttl = config["default"].ttl;
    }
    if (((_ref1 = config["default"]) != null ? _ref1.grant_type : void 0) != null) {
      return clientModel.default_grant_type = config["default"].grant_type;
    }
  }
};

internals.configObj = BrokersHelper.getConfig('clientModel');

if (internals.configObj != null) {
  internals.config = internals.configObj.value;
  internals.configObj.on('changed', function(oldValue, newValue) {
    console.log('client_mod config changed');
    internals.config = newValue;
    return internals.configInit();
  });
} else {
  internals.config = {
    "tern_iPhone": {
      ttl: 10 * 365 * 24 * 3600
    },
    "default": {
      ttl: 24 * 3600,
      grant_type: 'code'
    }
  };
}

internals.configInit();

/*
# Module Exports
*/


clientModel = coreClass.get();

module.exports.clearAll = function(next) {
  return clientModel.clearAll(function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

module.exports.populate = function(next) {
  return clientModel.populate(function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

module.exports.lookup = function(client_id, next) {
  return clientModel.lookup(client_id, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

module.exports.authenticate = function(client_id, client_secret, next) {
  return clientModel.authenticate(client_id, client_secret, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

module.exports.resume = function(client_id, next) {
  return clientModel.setSuspended(client_id, false, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

module.exports.suspend = function(client_id, next) {
  return clientModel.setSuspended(client_id, true, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};
