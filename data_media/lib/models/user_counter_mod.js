// Generated by CoffeeScript 1.3.3
var CheckFolderError, DB, Err, Log, SupportedFolders, UserCounterTableKey, coreClass, memoModel, _UserCounterModel,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  _this = this;

Log = require('tern.logger');

Err = require('tern.exceptions');

DB = require('tern.database');

/*
# Redis Database
# UserCounterTable:
#   type: HASH
#   key:  users/[user_id]/counters/
*/


UserCounterTableKey = function(user_id) {
  return ['users', user_id, 'counters'].join('/');
};

SupportedFolders = ['memo', 'tag', 'comment', 'sharing_roster'];

CheckFolderError = function(folderName) {
  if (__indexOf.call(SupportedFolders, folderName) < 0) {
    return Err.ArgumentUnsupportedException("Unsupported folder name('" + folderName + "').");
  } else {
    return null;
  }
};

coreClass = (function() {
  var _instance;

  function coreClass() {}

  _instance = void 0;

  coreClass.get = function() {
    return _instance != null ? _instance : _instance = new _UserCounterModel;
  };

  return coreClass;

})();

_UserCounterModel = (function() {

  function _UserCounterModel() {
    this["delete"] = __bind(this["delete"], this);

    this.increase = __bind(this.increase, this);

    this.getCurrent = __bind(this.getCurrent, this);
    this.db = null;
  }

  _UserCounterModel.prototype.getCurrent = function(user_id, folderName, next) {
    var err, key,
      _this = this;
    if (this.db == null) {
      this.db = DB.getDB('userDBShards', user_id);
    }
    key = UserCounterTableKey(user_id);
    if ((err = CheckFolderError(folderName)) != null) {
      return next(err);
    }
    return this.db.hget(key, folderName, function(err, res) {
      if (err != null) {
        return next(err);
      }
      if (res != null) {
        res = parseInt(res);
      } else {
        res = 0;
      }
      res = res != null ? parseInt(res) : 0;
      return next(null, res);
    });
  };

  _UserCounterModel.prototype.increase = function(user_id, folderName, increment, next) {
    var err, key,
      _this = this;
    if (this.db == null) {
      this.db = DB.getDB('userDBShards', user_id);
    }
    key = UserCounterTableKey(user_id);
    if ((err = CheckFolderError(folderName)) != null) {
      return next(err);
    }
    return this.db.hincrby(key, folderName, increment, function(err, res) {
      return next(err, res);
    });
  };

  _UserCounterModel.prototype["delete"] = function(user_id, folderName, next) {
    var err, key,
      _this = this;
    if (this.db == null) {
      this.db = DB.getDB('userDBShards', user_id);
    }
    key = UserCounterTableKey(user_id);
    if ((err = CheckFolderError(folderName)) != null) {
      return next(err);
    }
    return this.db.hdel(key, folderName, function(err, res) {
      return next(err, res);
    });
  };

  return _UserCounterModel;

})();

/*
# Modulereturn Exports
*/


memoModel = coreClass.get();

/*
# return:
#   res: new counter number
*/


module.exports.getCurrent = function(user_id, folderName, next) {
  return memoModel.getCurrent(user_id, folderName, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

module.exports.increase = function(user_id, folderName, next) {
  return memoModel.increase(user_id, folderName, 1, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

module.exports.decrease = function(user_id, folderName, next) {
  return memoModel.increase(user_id, folderName, -1, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};

module.exports["delete"] = function(user_id, folderName, next) {
  return memoModel["delete"](user_id, folderName, function(err, res) {
    if (next != null) {
      return next(err, res);
    }
  });
};
