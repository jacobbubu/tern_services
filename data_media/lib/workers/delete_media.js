// Generated by CoffeeScript 1.3.3
var Datazones, DeleteMedia, Log, MediaFile, PJ, Receiver, ZMQStatusCodes, current, dataZone, endpoint, host, mediaQueues, port, receiver, value, _ref, _ref1;

Log = require('tern.logger');

Receiver = require('tern.queue').Receiver;

Datazones = require('tern.data_zones');

PJ = require('tern.prettyjson');

MediaFile = require('../models/media_file_mod');

ZMQStatusCodes = require('tern.zmq_helper').zmq_status_codes;

DeleteMedia = (function() {

  function DeleteMedia() {}

  DeleteMedia.prototype.run = function(data, next) {
    var media_id;
    Log.info('DeleteMedia [recv]\r\n-\r\n' + PJ.render(data));
    media_id = data.media_id;
    return MediaFile.unlink(media_id, function(err, numberOfRemovedMedia) {
      var response;
      if ((next != null) && (err != null)) {
        return next(err);
      }
      if (numberOfRemovedMedia > 0) {
        response = {
          status: ZMQStatusCodes.OK
        };
      } else {
        response = {
          status: ZMQStatusCodes.NotFound
        };
      }
      if (next != null) {
        return next(null, response);
      }
    });
  };

  return DeleteMedia;

})();

current = Datazones.currentDataZone();

_ref = Datazones.all();
for (dataZone in _ref) {
  value = _ref[dataZone];
  mediaQueues = value.mediaQueuesToOtherZones;
  if ((mediaQueues != null ? mediaQueues[current] : void 0) != null) {
    _ref1 = mediaQueues != null ? mediaQueues[current].dealer.connect : void 0, host = _ref1.host, port = _ref1.port;
    endpoint = "tcp://" + host + ":" + port;
    receiver = new Receiver({
      dealer: endpoint
    });
    receiver.registerWorker('DeleteMedia', DeleteMedia);
    Log.notice("Worker('DeleteMedia') registered from " + current + " to " + dataZone + " on " + endpoint);
  }
}
