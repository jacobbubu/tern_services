// Generated by CoffeeScript 1.3.3
var Log, MediaFile, Memo, Utils, ZMQStatusCodes;

Log = require('tern.logger');

Utils = require('tern.utils');

ZMQStatusCodes = require('tern.zmq_helper').zmq_status_codes;

Memo = require('../models/memo_mod');

MediaFile = require('../models/media_file_mod');

exports.processMessage = function(message, next) {
  var changedMemo, dropError, media_id, method, response;
  dropError = function(status, description) {
    var response;
    response = {
      response: {
        status: status,
        error: description
      }
    };
    if (next != null) {
      return next(null, response);
    }
  };
  if (message.req_ts == null) {
    return dropError(ZMQStatusCodes.BadRequest, "'req_ts' required.");
  }
  if (message.request == null) {
    return dropError(ZMQStatusCodes.BadRequest, "'request' required.");
  }
  method = message.request.method;
  if (method == null) {
    return dropError("'request.method' in message required.");
  }
  method = method.trim();
  switch (method.toLowerCase()) {
    case 'ping':
      response = {
        response: {
          status: ZMQStatusCodes.OK
        }
      };
      if (next != null) {
        return next(null, response);
      }
      break;
    case 'mediauriwriteback':
      changedMemo = message.request.data;
      if (changedMemo == null) {
        return dropError(ZMQStatusCodes.BadRequest, "'request.data' required.");
      }
      if (changedMemo.mid == null) {
        return dropError(ZMQStatusCodes.BadRequest, "'request.data.mid' in message required.");
      }
      if (changedMemo.user_id == null) {
        return dropError(ZMQStatusCodes.BadRequest, "'request.data.user_id' in message required.");
      }
      if (changedMemo.device_id == null) {
        return dropError(ZMQStatusCodes.BadRequest, "'request.data.device_id' in message required.");
      }
      if (changedMemo.updated_at == null) {
        return dropError(ZMQStatusCodes.BadRequest, "'request.data.updated_at' in message required.");
      }
      if (changedMemo.media_meta == null) {
        return dropError(ZMQStatusCodes.BadRequest, "'request.data.media_meta' in message required.");
      }
      if (changedMemo.media_meta.uri == null) {
        return dropError(ZMQStatusCodes.BadRequest, "'request.data.media_meta.uri' in message required.");
      }
      return Memo.mediaUriWriteback(message.request.data, function(err, res) {
        var result, status;
        if ((next != null) && (err != null)) {
          return next(err);
        }
        try {
          result = res[0];
          status = result.status;
          switch (status) {
            case 1:
              response = {
                response: {
                  status: ZMQStatusCodes.BadRequest
                }
              };
              break;
            case 0:
              response = {
                response: {
                  status: ZMQStatusCodes.OK
                }
              };
              break;
            case -1:
              response = {
                response: {
                  status: ZMQStatusCodes.BadRequest
                }
              };
              break;
            case -3:
              response = {
                response: {
                  status: ZMQStatusCodes.NotFound
                }
              };
          }
          if (next != null) {
            next(null, response);
          }
        } catch (e) {
          return next(e);
        }
      });
    case 'deletemedia':
      media_id = message.request.data.media_id;
      return MediaFile.unlink(media_id, function(err, numberOfRemovedMedia) {
        if ((next != null) && (err != null)) {
          return next(err);
        }
        if (numberOfRemovedMedia > 0) {
          response = {
            response: {
              status: ZMQStatusCodes.OK
            }
          };
        } else {
          response = {
            response: {
              status: ZMQStatusCodes.NotFound
            }
          };
        }
        if (next != null) {
          return next(null, response);
        }
      });
    default:
      response = {
        response: {
          status: ZMQStatusCodes.MethodNotAllowed
        }
      };
      if (next != null) {
        return next(null, response);
      }
  }
};

/*
  Request example: 
  {
    req_ts  : 1337957267701,
    request: {
      method  : 'tokenAuth'
      data: {
        access_token: 'xxxxxxxxxx'
      }
    }
  }

  Response example: 
  {
    req_ts  : 1337957267701
    Response: {
      method  : 'tokenAuth'
      status  : 200
      data: {
        access_token: 'xxxxxxxxxx'
      }
    }
  }

  Error example: 
  {
    req_ts  : 1337957267701
    Response: {
      method  : 'tokenAuth'
      status  : 400
      error   : "'req_ts' in message required."
    }
  }
*/

